#!/usr/bin/env python3
import argparse
import shutil
import sys
from collections import deque, namedtuple
from pathlib import Path

from utils import gen_naming_scheme, get_cliparser, pickle_obj, unpickle_path

DAY = gen_naming_scheme()
ARCHIVED = Path("./archived/")
HISTORY_FILE = Path('./archived/.archive_history.pickle')

Target = namedtuple("Target", ["Poriginal", "Parchived"])



if __name__ == "__main__":

    PARSER = get_cliparser()

    args = PARSER.parse_args()

    DRY = args.dry
    TARGETS = args.targets
    UNARCHIVE = args.unarchive

    if not TARGETS and not UNARCHIVE:
        # print usage to stdout
        PARSER.print_help(file=None)
        sys.exit()

    destination = ARCHIVED / DAY

    try:
        if DRY and not destination.exists():
            print(f"{destination} would've been created.")
        else:
            destination.mkdir(parents=True)
    except FileExistsError:
        pass # Failing downstream? if destination is a file


    try:
        history = unpickle_path(HISTORY_FILE)
    except FileNotFoundError:
        history = deque()

    # Main loop
    if UNARCHIVE:
        # Pop history
        to_undo = history.pop()
        for target in to_undo:
            print(f"move {target.Parchived} to {target.Poriginal.parent}")
            shutil.move(target.Parchived,target.Poriginal.parent)
            # then check for an empty datedir and delete it
    else:
        # to be popoulated of Target named tuples
        single_run = list()
        for target in TARGETS:

            target = Path(target)
            if target == ARCHIVED: continue

            if DRY:
                print(f"{target} would've been moved to {destination})")
            else:
                shutil.move(target, destination)
                single_run.append(Target(Poriginal=target, Parchived= destination / target.name ))

        if not DRY:
            # Push (append) to history stack, grows on the right.
            history.append(tuple(single_run))
            pickle_obj(history, HISTORY_FILE)
